---
title: "Replication_Mattie_Soghikian.qmd"
format: html
editor: visual
---

# Activity Objectives

Exposure to Bioinformatics work.

## BioInformatics Objectives:

-   Use the arrow (`<-`) operator to store objects in variables.

-   Use R's `sample()` function to create a random "genome" for the purpose of testing functions.

-   Build functions to process and analyze genetic data.

-   Learn about `for` loops and implement them when necessary.

-   Read in a real bacterial genome from a text file.

-   Analyse the genome using the ideas and tools developed in the first part of the notebook.

## Loading Packages

```{r setup, include = FALSE}
#Load in any packages you need
library(tidyverse)

#Read in any data
```

### Challenge 1

Create a list of nucleotides using `c()`

```{r}

nucleotides <- c("A","C","G","T")
```

### Challenge 2

Generating a random string of 15 nucleotides

```{r}

#Generating a random genome

numNucleotides <- 15

randGenome <- sample(nucleotides, size = numNucleotides, replace = TRUE)

randGenome

#Collapse genome into single string

paste(randGenome, collapse = "")
```

### Challenge 3

Generate random genome 1500 nucleotides long and use `paste()` method to collapse into a single string

```{r}

set.seed(215)

numNucleotides <- 1500

randGenome <- sample(nucleotides, size = numNucleotides, replace = TRUE)

randGenome

#Collapse genome into single string

randGenome <- paste(randGenome, collapse = "")

randGenome
```

### Challenge 4

Set a seed and generate random genome consisting of 100 nucleotides and collapse it.

```{r}
set.seed(215)

numNucleotides <- 100

randGenome <- sample(nucleotides, size = numNucleotides, replace = TRUE)

randGenome

#Collapse genome into single string

randGenome <- paste(randGenome, collapse = "")

randGenome
```

### Challenge 5

Create loop with variable `myProduct` with the value 1. Write your own for loop which takes the integer values from 1-15.

```{r}

myProduct <- 1

for(j in 1:15){
  myProduct <- myProduct + j
  print(myProduct)
}
```

### Challenge 6

Generate a random genome consisting of 10 nucleotides and collapse into a single string rather than a list. Then write a `for()` loop.

```{r}

numNucleotides <- 10

randGenome <- sample(nucleotides, size = numNucleotides, replace = TRUE)

randGenome<- paste(randGenome, collapse = "")

randGenome

for(i in 1:10){
  print(str_sub(randGenome, start=i, end= i))
}
#Flow control - if, else if and else statements
#Generate new random genome

nucleotides <- c("A", "C", "G", "T")
genomeLength <- 10

randGenome <- paste(
  sample(nucleotides, size = genomeLength, replace = TRUE),
  collapse = "")

print(randGenome)

```

### Challenge 7

Adapt the loop so it counts the number of occurences of Adenine in randGenome.

```{r}

randGenome
randGenome <- paste(randGenome, collapse = "")
randGenome

adenine_count <-0

#nchar = number of characters

for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "A"){
    adenine_count <- adenine_count + 1
  }
}

print(adenine_count)

```

### Challenge 8

Adapt the loop so it will count the frequencies of each of the four individual nucleotides.

```{r}

randGenome
randGenome <- paste(randGenome, collapse = "")
randGenome

adenine_count <-0
cytosine_count <-0
guanine_count <-0
thymine_count <-0

#nchar = number of characters

for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "A"){
    adenine_count <- adenine_count + 1
  }
  if(str_sub(randGenome, start = i, end = i) == "C"){
    cytosine_count <- cytosine_count + 1
  }
  if(str_sub(randGenome, start = i, end = i) == "G"){
    guanine_count <- guanine_count + 1
  }
  if(str_sub(randGenome, start = i, end = i) == "T"){
    thymine_count <- thymine_count + 1
  }
}

print(c(adenine_count, cytosine_count, guanine_count, thymine_count))
```

### Challenge 9

Count the frequency of each nucleotide in the *Vibrio Cholerae* chromosome.

```{r}

vib_c <- scan("C:/Users/soghi/OneDrive/Desktop/nucleotide.txt", what = "character", sep = NULL)

#vib_c below hashtagged out for now!!!! important

#vib_c 
adenine_count1 <-0
cytosine_count1 <-0
guanine_count1 <-0
thymine_count1 <-0

#nchar = number of characters

for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "A"){
    adenine_count1 <- adenine_count1 + 1
  }
  if(str_sub(vib_c, start = i, end = i) == "C"){
    cytosine_count1 <- cytosine_count1 + 1
  }
  if(str_sub(vib_c, start = i, end = i) == "G"){
    guanine_count1 <- guanine_count1 + 1
  }
  if(str_sub(vib_c, start = i, end = i) == "T"){
    thymine_count1 <- thymine_count1 + 1
  }
}

print(c(adenine_count1, cytosine_count1, guanine_count1, thymine_count1))
```

### Challenge 10

Create account on rosalind.info and sample another dataset genome string, and use your code to count the number of each nucleotide.

```{r}

vib_c <- scan("C:/Users/soghi/Downloads/rosalind_dna (1).txt", what = "character", sep = NULL)

vib_c 
adenine_count2 <-0
cytosine_count2 <-0
guanine_count2 <-0
thymine_count2 <-0

#nchar = number of characters

for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "A"){
    adenine_count2 <- adenine_count2 + 1
  }
  if(str_sub(vib_c, start = i, end = i) == "C"){
    cytosine_count2 <- cytosine_count2 + 1
  }
  if(str_sub(vib_c, start = i, end = i) == "G"){
    guanine_count2 <- guanine_count2 + 1
  }
  if(str_sub(vib_c, start = i, end = i) == "T"){
    thymine_count2 <- thymine_count2 + 1
  }
}

print(c(adenine_count2, cytosine_count2, guanine_count2, thymine_count2))
```

# Finding the Replication Origin, Part 1

```{r}

nucleotide_frequency <- function(genomeString, nucleotide = "A"){
  count <- 0
  for(i in 1:nchar(genomeString)){
    if(str_sub(genomeString, start = i, end = i) == nucleotide){
      count <- count + 1
    }
  }
  return(count)
}

nucleotide_frequency("ACTTGCGGGTATCGAG", "G")
```

### Challenge 1

Generate a random genome at least 2000 nucleotides in length using sample() and paste(..., collapse= "") function. Count the number of Cytosine.

```{r}

nt_sample <- sample(nucleotides, size = 2000, replace = TRUE)
nt_sample <- paste(nt_sample, collapse = "")

nucleotide_frequency(nt_sample, "C")
```

### Challenge 2

Build function `rand_genome()` which takes a single parameter `k`, denoting the number of nucleotides in the genome (challenge 1 but different code to do it -- easier).

```{r}

rand_genome <- function(k){
  rand_genome <- sample(nucleotides, size = genomeLength, replace = TRUE)
  
  rand_genome <- paste(randGenome, collapse = "")
  return(randGenome)
}

rand_genome(10)
```

### Challenge 3

Build a function called `generate_3_mers()` to generate all of the substrings of 3 nucleotides in a genome string. Construct random genome 15 nucleoteotides and use new function to compute list of all 3-mers in genome.

```{r}

myString <- rand_genome(15)
generate_3_mers <- function(myString) {
  list_3_mers <- c()
  
  for(i in 1:(nchar(myString) - 2)){
    list_3_mers <- list_3_mers %>%
    append(str_sub(myString, start = i, end = i + 2))
  }
    return(list_3_mers)  
}

myString
generate_3_mers(myString)
```

### Challenge 4

Update `generate_3_mers()` function so it's able to generate k-mers of any length (greater than 0 and less than the size of the genome we begin with). Function uses 2 parameters -- `genomeString` and `k`, where `k` controls the \# of nucleotides in each `k`-mer.

```{r}

generate_k_mer <- function(string, k = 3){
  list_codon <- c()
  
  for (i in seq(1, nchar(string) - k + 1, by = k)) {
    list_codon <- list_codon %>%
      append(str_sub(string, start = i, end = i + k -1))
  }
  
  return(list_codon)
}

generate_k_mer(rand_genome(9))
```

### Challenge 5

Create a function counting the number of occurences of a pattern in a larger genome.

```{r}

count_pattern <- function(string, pattern){
  nt_matches <- 0
  for(i in 1:nchar(string)){
    if(str_sub(string, i, i + str_length(pattern)-1) == pattern){
      nt_matches = nt_matches + 1
    }
  }
  return(nt_matches)
}

count_pattern(rand_genome(2000), "CTG")
count_pattern("CGTAACTCGT", "CGT")
```

# Finding the Replication Origin, Part 2

### Challenge 1

Create `find_frequent_kmers` to count occurences in genome string.

```{r}

find_frequent_kmers <- function(genome,k){
  
  #get the kmers
  
  kmers <- generate_k_mer(genome,k)
  kmers <- unique(kmers)
  
  #count occurences
  
  kmer_counts <- rep(0, length(kmers))
  
  for(i in 1:length(kmers)){
    kmer_counts[i] <-count_pattern(genome, kmers[i]  )
  }
  #largest count
  max_freq <- max(kmer_counts)
  freq_kmers <- kmers[kmer_counts==max_freq]
  
  return(freq_kmers)

}
```

Find the most frequent repeat (3 nucleotides in length) in a string.

```{r}

mygenome <-rand_genome(10)
find_frequent_kmers(mygenome, 2)
find_frequent_kmers("AAATAAG", 3)
```

### Challenge 2
