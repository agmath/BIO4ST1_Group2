---
title: "Starter Notebook"
author: "Adaobi Nwankwo, Scientist"
format: html
execute:
  keep-md: true
---

```{r setup, include = FALSE}
#Load in any packages you need
rm(list = ls())
library(tidyverse)

#Read in any data

```


## Challenge 1

Creating a list of nucleotides contaning the four nucleotides.


```{r}
nucleotides <- c("Adenine (A)", "Cytosine (C), ", "Guanine (G)", "Thymine (T)")

nucleotides
```


## Challenge 2

Creating a random string of 15 nucleotides.


```{r}
genomeLength <- 15

randGenome <- sample(nucleotides, size = genomeLength, replace = TRUE)

paste(randGenome, collapse = "")
```


## Challenge 3

Creating a random genome which is 1500 nucleotides long.


```{r}
genomeLength <- 1500

randGenome <- sample(nucleotides, size = genomeLength, replace = TRUE)

paste(randGenome, collapse = "")
```

```{r}
set.seed(215)
genomeLength <- 100

randGenome <- sample(nucleotides, size = genomeLength, replace = TRUE)

paste(randGenome, collapse = "")

```


## Challenge 4

Looping with for loops.


```{r}
mySum <- 0

for(i in 1:10){
  mySum <- mySum + i
  print(mySum)
}
```


## Challenge 5

Writing and executing a loop.


```{r}
myProduct <- 1

for(j in 1:15){
  myProduct <- myProduct + i
  print(myProduct)
}
```

```{r}
nucleotides <- c("A", "C", "G", "T")
genomeLength <- 10

randGenome <- paste(
  sample(nucleotides, size = genomeLength, replace = TRUE),
                   collapse = "")
print(randGenome)
```


## Challenge 6

Generating a random genome substring consisting of 10 nucleotides.


```{r}
randGenome <- sample(nucleotides, size=genomeLength, replace = TRUE)
randGenome
randGenome <- paste(randGenome, collapse = "")
randGenome

for(j in 1:15){
  print(str_sub(randGenome, start = 1, end = 1))
}
```

```{r}
for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "A"){
    print(str_sub(randGenome, start = i, end = i))
  }
}
```

```{r}
for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "G"){
    print(str_sub(randGenome, start = i, end = i))
  }
}
```

```{r}
for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "T"){
    print(str_sub(randGenome, start = i, end = i))
  }
}
```

```{r}
for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "C"){
    print(str_sub(randGenome, start = i, end = i))
  }
}
```


## Challenge 7

Adapting the loop so it provides the count of occurences of Adenine.


```{r}

randGenome 
randGenome <- paste(randGenome, collapse = "")
randGenome

Adenine_count <- 0

#nchar: number of characters

for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "A"){
    Adenine_count <- Adenine_count + 1
  }
}
print(Adenine_count)
```


## Challenge 8

Adapting the loop to count for the count of frequencies for each nucleotide.


```{r}
randGenome 
randGenome <- paste(randGenome, collapse = "")
randGenome

Adenine_count <- 0

#nchar: number of characters

for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "A"){
    Adenine_count <- Adenine_count + 1
  }
}
Cytosine_count <- 0

for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "C"){
    Cytosine_count <- Cytosine_count + 1
  }
}

Thymine_count <- 0

for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "T"){
    Thymine_count <- Thymine_count + 1
  }
}

Guanine_count <- 0

for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "G"){
    Guanine_count <- Guanine_count + 1
  }
}
print(Adenine_count)
print(Cytosine_count)
print(Thymine_count)
print(Guanine_count)
```

```{r}
vib_c <- scan("~/Desktop/Bioinformatics Data/Untitled.txt", what = "character", sep = NULL)
vib_c
```


## Challenge 9


```{r}
vib_c
vib_c <- paste(vib_c, collapse = "")

Adenine_count <- 0

#nchar: number of characters

for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "A"){
    Adenine_count <- Adenine_count + 1
  }
}
Cytosine_count <- 0

for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "C"){
    Cytosine_count <- Cytosine_count + 1
  }
}

Thymine_count <- 0

for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "T"){
    Thymine_count <- Thymine_count + 1
  }
}

Guanine_count <- 0

for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "G"){
    Guanine_count <- Guanine_count + 1
  }
}
print(Adenine_count)
print(Cytosine_count)
print(Thymine_count)
print(Guanine_count)
```


## Challenge 10


```{r}
vib_c <- scan("~/Desktop/Bioinformatics Data/Rosalind_DNA.txt", what = "character", sep = NULL)
vib_c
```

```{r}
vib_c
vib_c <- paste(vib_c, collapse = "")

Adenine_count <- 0

#nchar: number of characters

for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "A"){
    Adenine_count <- Adenine_count + 1
  }
}
Cytosine_count <- 0

for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "C"){
    Cytosine_count <- Cytosine_count + 1
  }
}

Thymine_count <- 0

for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "T"){
    Thymine_count <- Thymine_count + 1
  }
}

Guanine_count <- 0

for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "G"){
    Guanine_count <- Guanine_count + 1
  }
}
print(Adenine_count)
print(Cytosine_count)
print(Thymine_count)
print(Guanine_count)
```


# Replication Origin, Part 1

## The Search for the Replication Origin

The function below takes in two arguments, a string and a nucleotide. The result is the frequency of the nucleotide within the genome string. Then a function will be used to count the frequency of Guanine in a particular string of nucleotides. After running this code, the frequency of Guanine is this string of nucleotides is 6.


```{r}
nucleotide_frequency <- function(genomeString, nucleotide = "A"){
  count <- 0
  for(i in 1:nchar(genomeString)){
    if(str_sub(genomeString, start = i, end = i) == nucleotide){
      count <- count + 1
    }
  }
  return(count)
}

nucleotide_frequency("ACTTGCGGGTATCGAG", "G")
```


## Challenge 1

This challenge involves generating a random genome length of 2000. To do this, the sample() function and collapse function will be utilized. The nucleotide frequency function will be used to count the frequency of Cytosine in the random genome. The frequency of Cytosine in a sample of 2000 is being counted in this case.


```{r}
nt_sample <- sample(nucleotides, size = 2000, replace = TRUE)
nt_sample <- paste(nt_sample, collapse = "")

nucleotide_frequency(nt_sample, "C")
```


## Challenge 2

In this challenge, k denotes the number of nucleotides Using the parameter k is a lot simpler than typing out a whole function representing the number of nucleotides. The function returns a single genome string of length K.


```{r}
rand_genome <- function(k){
 randGenome <- sample(nucleotides, size = k, replace = TRUE)

  randGenome <- paste(randGenome, collapse = "")
  return(randGenome)
}

rand_genome(10)
```


## Challenge 3

In this challenge, a function called generate_3\_mars which will generate all of the substrings of 3 nucletoides in a genome string. This function will return a list containing all of the 3-mers in genomestring. Then, the rand genome function is used to gnerate a random genome length of 2000 nucleotides. Lastly, a list was computed of all the 3-mers in your random genome. To ensure, the code is working properly, I used a smaller nucleeotide length of 10 which was helpful to see what was actually happening within the code.


```{r}
myString <-rand_genome(2000)
generate_3_mers <- function(myString) {
  list_3_mers <- c()
    
    for(i in 1:(nchar(myString) - 2)){
      list_3_mers <- list_3_mers %>%
      append(str_sub(myString, start = i, end = i + 2))
    }
    return(list_3_mers)
}
myString
generate_3_mers(myString)

```


## Challenge 4

In this challenge, we create a function called generate_k\_mers. K controls the number of nucleotides in each k-mer.


```{r}
generate_k_mer <- function(string, k = 3) {
  list_codon <- c()
  
  for(i in seq(1, nchar(string) - k + 1, by = k)) {
    list_codon <- list_codon %>%
      append(str_sub(string, start = i, end = i + k - 1))
  }
  return(list_codon)
}
generate_k_mer(rand_genome(9))

```

```{r}
myString <-rand_genome(15)
generate_3_mers <- function(myString) {
  list_3_mers <- c()
  
  for(i in 1:(nchar(myString) - 2)){
  list_3_mers <- list_3_mers %>%
    append(str_sub(myString, start = i, end = i + 2))
  }
  return(list_3_mers)
}
myString
generate_3_mers(myString)

```

