---
title: "Intro to R for Bioinformatics"
author: "Melanie Dube, Scientist"
format: html
execute:
  keep-md: true
---

## Introduction

### Activity Objectives

Below are the listed objectives for this new notebook:

-   Use the arrow (`<-`) operator to store objects in variables.

-   Use R's `sample()` function to create a random "genome" for the purpose of testing functions.

-   Build functions to process and analyze genetic data.

-   Learn about `for` loops and implement them when necessary.

-   Read in a real bacterial genome from a text file.

-   Analyse the genome using the ideas and tools developed in the first part of the notebook.

### Loading Packages

First code chunk always loads needed packages (seen below).

```{r setup, include = FALSE}
#Load in any packages you need
library(tidyverse)

#Read in any data

```

## Challenge 1

The first challenge is to create a list with the four nucleotides. This is done with the `c()` function.

```{r}
nucleotides <- c("A", "C", "G", "T" )

nucleotides
```

## Challenge 2

The second challenge is to adapt a code to create a random strand of 15 nucleotides. This should be called `randGenome`.

```{r}
numNucleotides <- 15

randGenome <- sample(nucleotides, size = numNucleotides, replace = TRUE)

randGenome
```

The block above creates the list for the random genome, and the block below will collapse it and make it more readable.

```{r}
paste(randGenome, collapse = "")
```

Before comparing my block with a someone else, I predict that another classmate's will be a different random order. This is because we are instructing R to generate a random code, therefore it should be different every time we run it.

## Challenge 3

The third challenge is to generate a random genome that is 1500 nucleotides long and collapse it down to a single string.

```{r}
numNucleotidesChal3 <- 1500

randGenomeChal3 <- sample(nucleotides, size = numNucleotidesChal3, replace = TRUE)

randGenomeChal3

paste(randGenomeChal3, collapse = "")
```

The block above successfully creates the 1500 unit random genome.

```{r}
set.seed(215)
genomeLength <- 1500

randGenome4 <- sample(nucleotides, size = genomeLength, replace = TRUE)

randGenome4
randGenome4 <- paste(randGenome, collapse = "")

```

Will need to compare this to others when able to do so.

## Challenge 4

The fourth challenge is to use the `set.seed(215)` command to create a random genome of 100 nucleotides in a single string.

```{r}
set.seed(215)
genomeLength <- 100

randGenome <- sample(nucleotides, size = genomeLength, replace = TRUE)
randGenome
paste(randGenome, collapse = "")


```

The number of Adenine (A) in this sequence: **23** (need to verify with others)

### Loops

Basic idea of using a `for` loop function:

1.  Set an iterator (this may just be a counter or it may be floating over elements in an existing list).

2.  Provide the instructions to be run each time through the loop.

Practicing loops:

```{r}
mySum <- 0

for(i in 1:10){
  mySum <- mySum + i
  print(mySum)
}
```

## Challenge 5

The fifth challenge is to initialize a variable called `myProduct` (with the value 1) and write a loop using the iterator `j`.

```{r}
myProduct <- 1

for(j in 1:15){
  myProduct <- myProduct + j
  print(myProduct)
}
```

This code block runs the `for` loop with the created variable. Need to verify this with others when get the chance.

## Challenge 6

The sixth challenge is to create a random genome sub string of 10 nucleotides and use the `paste` function to collapse to a single string. Then, we need to use a `for` loop to print out each nucleotide.

```{r}
numNucleotides <- 10

randGenome <- sample(nucleotides, size = numNucleotides, replace = TRUE)
randGenome
paste(randGenome, collapse = "")
randGenome <- paste(randGenome, collapse = "")

for(i in 1:10){
  print(str_sub(randGenome, start = i, end = i))
}
```

The above code block combines multiple functions to get a simple result. First, the `randGenome` function is created for 10 random nucleotides. Next, the `for` loop function creates the nucleotides into a single string, utilizing the `str_sub` command. This creates the whole strand into a single character.

## Challenge 7

This challenge asks to count the number of occurrences of Adenine in the randGenome sequence. This is done using an adaptation of the loop function. By adding `Adenine_count + 1`, the code knows to update the adenine count every time an `A` is encountered in the `randGenome`.

```{r}
randGenome
randGenome<- paste(randGenome, collapse = "")
Adenine_count <- 0
for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "A"){
    Adenine_count <- Adenine_count + 1
  }
}
print(Adenine_count)
```

## Challenge 8

In this challenge we must count the frequencies for each of the four nucleotides.

```{r}
randGenome
randGenome<- paste(randGenome, collapse = "")
Guanine_count <- 0
for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "G"){
    Guanine_count <- Guanine_count + 1
  }
}
print(Guanine_count)
```

This counts the frequency for `G`.

```{r}
randGenome
randGenome<- paste(randGenome, collapse = "")
Cytosine_count <- 0
for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "C"){
    Cytosine_count <- Cytosine_count + 1
  }
}
print(Cytosine_count)
```

This counts the frequency for `C`.

```{r}
randGenome
randGenome<- paste(randGenome, collapse = "")
Thymine_count <- 0
for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "T"){
    Thymine_count <- Thymine_count + 1
  }
}
print(Thymine_count)
```

This counts the frequency for `T`.

## Challenge 9

Now we need to use the same concepts to count the frequencies on a real genome with over a million nucleotides.

```{r}
vib_c <- scan("~/Desktop/Bioinformatics/VibrioCholerae.txt", what = "character", sep = NULL)

#vib_c
```

Above is the entire genome for Vibrio Cholerae. Below is the code to count each of the nucleotides individually.

Counts for:

-   A = **293,942**

-   G = **256,024**

-   C = **263,573**

-   T = **294,711**

```{r}
vib_c<- paste(vib_c, collapse = "")
Cytosine_count <- 0
for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "C"){
    Cytosine_count <- Cytosine_count + 1
  }
}
print(Cytosine_count)
```

```{r}
vib_c<- paste(vib_c, collapse = "")
Adenine_count <- 0
for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "A"){
    Adenine_count <- Adenine_count + 1
  }
}
print(Adenine_count)
```

```{r}
vib_c<- paste(vib_c, collapse = "")
Guanine_count <- 0
for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "G"){
    Guanine_count <- Guanine_count + 1
  }
}
print(Guanine_count)
```

```{r}
vib_c<- paste(vib_c, collapse = "")
Thymine_count <- 0
for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "T"){
    Thymine_count <- Thymine_count + 1
  }
}
print(Thymine_count)
```

This could also all be combined into one `for` loop, to avoid running the genome so many times. Each of the components would each be repeated three times (count, if statements, and print) for each of the individual nucleotides.

## Challenge 10

The tenth challenge is to navigate and verify the Rosalind challenge. The data is uploaded below and the number of individual nucleotides is calculated.

```{r}
rosalind_dna <- scan("~/Desktop/Bioinformatics/rosalind_dna.txt", what = "character", sep = NULL)

rosalind_dna
```

```{r}
rosalind_dna<- paste(rosalind_dna, collapse = "")
Thymine_count <- 0
Cytosine_count <- 0
Guanine_count <- 0
Adenine_count <- 0

for(i in 1:nchar(rosalind_dna)){
  if(str_sub(rosalind_dna, start = i, end = i) == "T"){
    Thymine_count <- Thymine_count + 1
  }
  if(str_sub(rosalind_dna, start = i, end = i) == "C"){
    Cytosine_count <- Cytosine_count + 1
  }
  if(str_sub(rosalind_dna, start = i, end = i) == "G"){
    Guanine_count <- Guanine_count + 1
  }
  if(str_sub(rosalind_dna, start = i, end = i) == "A"){
    Adenine_count <- Adenine_count + 1
  }
}
print(Thymine_count)
print(Cytosine_count)
print(Guanine_count)
print(Adenine_count)
```

Final Counts:

-   T: 247

-   C: 219

-   G: 240

-   A: 230

The challenge timed out before I was able to submit and verify my answers for the first data set, a second attempt is shown below.

```{r}
rosalind_dna1 <- scan("~/Desktop/Bioinformatics/rosalind_dna1.txt", what = "character", sep = NULL)

rosalind_dna1<- paste(rosalind_dna1, collapse = "")
Thymine_count <- 0
Cytosine_count <- 0
Guanine_count <- 0
Adenine_count <- 0

for(i in 1:nchar(rosalind_dna1)){
  if(str_sub(rosalind_dna1, start = i, end = i) == "T"){
    Thymine_count <- Thymine_count + 1
  }
  if(str_sub(rosalind_dna1, start = i, end = i) == "C"){
    Cytosine_count <- Cytosine_count + 1
  }
  if(str_sub(rosalind_dna1, start = i, end = i) == "G"){
    Guanine_count <- Guanine_count + 1
  }
  if(str_sub(rosalind_dna1, start = i, end = i) == "A"){
    Adenine_count <- Adenine_count + 1
  }
}
print(Thymine_count)
print(Cytosine_count)
print(Guanine_count)
print(Adenine_count)
```

After submitting the answer to Rosalind, I was able to verify that these were the correct totals for each nucleotide for this data set.

```{r}

```
