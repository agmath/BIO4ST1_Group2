---
title: "Starter Notebook"
author: "Adaobi Nwankwo, Scientist"
format: html
execute:
  keep-md: true
---

```{r setup, include = FALSE}
#Load in any packages you need
rm(list = ls())
library(tidyverse)

#Read in any data

```

## Challenge 1

Creating a list of nucleotides contaning the four nucleotides.

```{r}
nucleotides <- c("(A)", "(C), ", "(G)", "(T)")

nucleotides
```

## Challenge 2

Creating a random string of 15 nucleotides.

```{r}
genomeLength <- 15

randGenome <- sample(nucleotides, size = genomeLength, replace = TRUE)

paste(randGenome, collapse = "")
```

## Challenge 3

Creating a random genome which is 1500 nucleotides long.

```{r}
genomeLength <- 1500

randGenome <- sample(nucleotides, size = genomeLength, replace = TRUE)

paste(randGenome, collapse = "")
```

```{r}
set.seed(215)
genomeLength <- 100

randGenome <- sample(nucleotides, size = genomeLength, replace = TRUE)

paste(randGenome, collapse = "")

```

## Challenge 4

Looping with for loops.

```{r}
mySum <- 0

for(i in 1:10){
  mySum <- mySum + i
  print(mySum)
}
```

## Challenge 5

Writing and executing a loop.

```{r}
myProduct <- 1

for(j in 1:15){
  myProduct <- myProduct * i
  print(myProduct)
}
```

```{r}
nucleotides <- c("A", "C", "G", "T")
genomeLength <- 10

randGenome <- paste(
  sample(nucleotides, size = genomeLength, replace = TRUE),
                   collapse = "")
print(randGenome)
```

## Challenge 6

Generating a random genome substring consisting of 10 nucleotides.

```{r}
randGenome <- sample(nucleotides, size=genomeLength, replace = TRUE)
randGenome
randGenome <- paste(randGenome, collapse = "")
randGenome

for(j in 1:15){
  print(str_sub(randGenome, start = i, end = i))
}
```

```{r}
for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "A"){
    print(str_sub(randGenome, start = i, end = i))
  }
}
```

```{r}
for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "G"){
    print(str_sub(randGenome, start = i, end = i))
  }
}
```

```{r}
for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "T"){
    print(str_sub(randGenome, start = i, end = i))
  }
}
```

```{r}
for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "C"){
    print(str_sub(randGenome, start = i, end = i))
  }
}
```

## Challenge 7

Adapting the loop so it provides the count of occurences of Adenine.

```{r}

randGenome 
randGenome <- paste(randGenome, collapse = "")
randGenome

Adenine_count <- 0

#nchar: number of characters

for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "A"){
    Adenine_count <- Adenine_count + 1
  }
}
print(Adenine_count)
```

## Challenge 8

Adapting the loop to count for the count of frequencies for each nucleotide.

```{r}
randGenome 
randGenome <- paste(randGenome, collapse = "")
randGenome

Adenine_count <- 0

#nchar: number of characters

for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "A")
    Adenine_count <- Adenine_count + 1
  }

Cytosine_count <- 0

for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "C"){
    Cytosine_count <- Cytosine_count + 1
  }
}

Thymine_count <- 0

for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "T"){
    Thymine_count <- Thymine_count + 1
  }
}

Guanine_count <- 0

for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "G"){
    Guanine_count <- Guanine_count + 1
  }
}
print(Adenine_count)
print(Cytosine_count)
print(Thymine_count)
print(Guanine_count)
```

```{r}
vib_c <- scan("~/Desktop/Bioinformatics Data/Untitled.txt", what = "character", sep = NULL)
vib_c
```

## Challenge 9

```{r}
vib_c
vib_c <- paste(vib_c, collapse = "")

Adenine_count <- 0

#nchar: number of characters

for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "A"){
    Adenine_count <- Adenine_count + 1
  }
}
Cytosine_count <- 0

for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "C"){
    Cytosine_count <- Cytosine_count + 1
  }
}

Thymine_count <- 0

for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "T"){
    Thymine_count <- Thymine_count + 1
  }
}

Guanine_count <- 0

for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "G"){
    Guanine_count <- Guanine_count + 1
  }
}
print(Adenine_count)
print(Cytosine_count)
print(Thymine_count)
print(Guanine_count)
```

## Challenge 10

Using the rosalind code, I was able to solve the Rosalind problem.

```{r}
vib_c <- scan("~/Desktop/Bioinformatics Data/Rosalind_DNA.txt", what = "character", sep = NULL)
vib_c
```

```{r}
vib_c
vib_c <- paste(vib_c, collapse = "")

Adenine_count <- 0

#nchar: number of characters

for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "A"){
    Adenine_count <- Adenine_count + 1
  }
}
Cytosine_count <- 0

for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "C"){
    Cytosine_count <- Cytosine_count + 1
  }
}

Thymine_count <- 0

for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "T"){
    Thymine_count <- Thymine_count + 1
  }
}

Guanine_count <- 0

for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "G"){
    Guanine_count <- Guanine_count + 1
  }
}
print(Adenine_count)
print(Cytosine_count)
print(Thymine_count)
print(Guanine_count)
```

# Replication Origin, Part 1

## The Search for the Replication Origin

The function below takes in two arguments, a string and a nucleotide. The result is the frequency of the nucleotide within the genome string. Then a function will be used to count the frequency of Guanine in a particular string of nucleotides. After running this code, the frequency of Guanine is this string of nucleotides is 6.

```{r}
nucleotide_frequency <- function(genomeString, nucleotide = "A"){
  count <- 0
  for(i in 1:nchar(genomeString)){
    if(str_sub(genomeString, start = i, end = i) == nucleotide){
      count <- count + 1
    }
  }
  return(count)
}

nucleotide_frequency("ACTTGCGGGTATCGAG", "G")
```

## Challenge 1

This challenge involves generating a random genome length of 2000. To do this, the sample() function and collapse function will be utilized. The nucleotide frequency function will be used to count the frequency of Cytosine in the random genome. The frequency of Cytosine in a sample of 2000 is being counted in this case.

```{r}
nt_sample <- sample(nucleotides, size = 2000, replace = TRUE)
nt_sample <- paste(nt_sample, collapse = "")

nucleotide_frequency(nt_sample, "C")
```

## Challenge 2

In this challenge, k denotes the number of nucleotides Using the parameter k is a lot simpler than typing out a whole function representing the number of nucleotides. The function returns a single genome string of length K.

```{r}
rand_genome <- function(k){
 randGenome <- sample(nucleotides, size = k, replace = TRUE)

  randGenome <- paste(randGenome, collapse = "")
  return(randGenome)
}

rand_genome(10)
```

## Challenge 3

In this challenge, a function called generate_3\_mars which will generate all of the substrings of 3 nucletoides in a genome string. This function will return a list containing all of the 3-mers in genomestring. Then, the rand genome function is used to gnerate a random genome length of 2000 nucleotides. Lastly, a list was computed of all the 3-mers in your random genome. To ensure, the code is working properly, I used a smaller nucleeotide length of 10 which was helpful to see what was actually happening within the code.

```{r}
myString <-rand_genome(2000)
generate_3_mers <- function(myString) {
  list_3_mers <- c()
    
    for(i in 1:(nchar(myString) - 2)){
      list_3_mers <- list_3_mers %>%
      append(str_sub(myString, start = i, end = i + 2))
    }
    return(list_3_mers)
}
myString
generate_3_mers(myString)

```

## Challenge 4

In this challenge, we create a function called generate_k\_mers. K controls the number of nucleotides in each k-mer. This function returns a list of all k-mers in genomeString.

```{r}
generate_k_mer <- function(string, k = 3) {
  list_codon <- c()
  
  for(i in seq(1, nchar(string) - k + 1, by = k)) {
    list_codon <- list_codon %>%
      append(str_sub(string, start = i, end = i + k - 1))
  }
  return(list_codon)
}
generate_k_mer(rand_genome(9))

```

```{r}
myString <-rand_genome(15)
generate_3_mers <- function(myString) {
  list_3_mers <- c()
  
  for(i in 1:(nchar(myString) - 2)){
  list_3_mers <- list_3_mers %>%
    append(str_sub(myString, start = i, end = i + 2))
  }
  return(list_3_mers)
}
myString
generate_3_mers(myString)

```

## Challenge 5

The count pattern function takes in two arguments, string and pattern. This code returns the total number of matches found or occurrences of the pattern within the string. In the code block below, a random genome of 2000 is counted for CTG and it shows up 31 times within the random genome string.

```{r}
count_pattern <- function(string, pattern) {
  nt_matches <- 0
  for(i in 1:nchar(string)){
    if(str_sub(string, i, i + str_length(pattern)-1) == pattern){
      nt_matches = nt_matches + 1
    }
  }
  return(nt_matches)
}
count_pattern(rand_genome(2000), "CTG")
```

Here a string from rosalind is imported.

```{r}
rosalind_string <- "TTAGTCCCCAGTCCCCAGTCCCCTCCAGTCCCCGCAGTCCCCCAGTCCCCAGTCCCCCAGTCCCCAGTCCCCAGTCCCCAGCCAGTCCCCACCGGTGTGGTAGTCCCCCAAGTCCCCAAGTCCCCAGTGATAACAGTCCCCTTCTCTAAGTCCCCAGTCCCCGAGTCCCCAGTTGAGTCCCCCTAGTCCCCGCCTATAGTCCCCCCACGAGTCCCCTGAAGTCCCCTGAAAGTCCCCCTGACGCAAGTCCCCTAGTCCCCCAGTCCCCAGAAGTCCCCCAGTCCCCTAAGTCCCCTAGAGTCCCCAGTCCCCGAGAGTCCCCTGTAAGTCCCCCTCAGTCCCCGGCTCGAGTCCCCGATGAGTCCCCGAGTCCCCCCGAGTCCCCGGTTAGTCCCCAAGTCCCCGAGTCCCCGAGTCCCCTGAAGTCCCCGAGTCCCCTCGAGTCCCCAGTCCCCGCTAGTCCCCCTTAGTCCCCAGTCCCCGAGTCCCCAGTCCCCAGTCCCCAAGTCCCCCGTGGAGAAGTCCCCGCAGTCCCCAGTCCCCTCGATTAGTCCCCATGCGATAGTCCCCCAGTCCCCTGAGTCCCCAGTCCCCAAGTCCCCGTTAGTCCCCGAGTCCCCAAAATTAGTCCCCGAAGTCCCCCCGTAGTCCCCTGTGAGTCCCCGAGTCCCCAGTCCCCTTACGAGTCCCCGTCCAGTCCCCTGATTATATGAGAGTCCCCTTGGAGTCCCCTAGTCCCCTAAGTCCCCAGAGTGATTCTTAGTCCCCAAGTCCCCAGTCCCCGCTAGTCCCCATAGTCCCCAGTCCCCCGCAGTCCCCCTACCTCAGTCCCCAAGTCCCCCAGTCCCCCAGTCCCCGGTATTAGTCCCCGAAGTCCCCGAGTCCCCATACTCAAGTCCCCCAGTCCCCGGATGGTAGAGTCCCCAGTCCCCTAGTCCCCCCGAGTCCCCAGTCCCCCAGTCCCCACGGCGGCTAAAGTCCCCTAGTCCCCAGTCCCCGATGCAGTCCCCAAGTCCCCAGTCCCC"
```

The count pattern function is tested on this rosalind string. By looking at the code block below it is evident that AGTCCCAG shows up 25 times in the rosalind string. This code suggests this pattern appeared 25 times within this genome. This was the correct answer meaning the function worked.

```{r}
count_pattern(rosalind_string, "AGTCCCCAG")
```

# Replication Origin, Part 2

## Challenge 1

Here, I'm finding the most frequent words in a string. Find_fequent_kmers will generate a list of the most frequent k-mers in genomeString. The unique function removes duplicates.

```{r}
find_frequent_kmers <- function(genome, k){
  
  #get the kmers
  kmers <- generate_k_mer(genome, k)
  kmers <- unique(kmers)
  
  #count occurences
  kmer_counts <- rep(0, length(kmers))
  for(i in 1:length(kmers)){
    kmer_counts[i] <- count_pattern(genome, kmers[i])
  }
  #largest count
  max_freq <- max(kmer_counts)
  freq_kmers <- kmers[kmer_counts == max_freq]
  
  return(freq_kmers)
}
```

Here the function is tested. The code block below returned two 2-mers "(TC and AT) in the random genome with a length of 10.

```{r}
myGenome <- rand_genome(10)
find_frequent_kmers(myGenome, 2)
find_frequent_kmers("AAATAAAG", 3)
```

## Challenge 2

The reverse_complement function takes a string and returns its reverse complement. The complement of A is T, the complement of G is C. The reverse_complement function reverses the order of the nucleotides and gives the complement of each nucleotide. In the code block below, ATTG is input and CAAT is output.

```{r}
reverse_complement <- function(genomeSubString){
    complement = c('A' = 'T', 'C' = 'G', 'G' = 'C', 'T' = 'A')
    reverse_complement <- ''
    for (nucleotide in rev(strsplit(genomeSubString, "")[[1]])){
      reverse_complement <- paste(reverse_complement, complement[nucleotide], sep="")
    }
    return(reverse_complement)
}
reverse_complement("ATTG")
```

# Replication Origin, Part 3

## Challenge 1

Here, we will find the most frequent words in a string. Initialize_k\_mer_dict gives possible combinations of kmers but doesn't count them. Instead it takes k and generates all possible DNA k-mers of length k containing the nucleotides A, C, G, and T.

```{r}
initialize_k_mer_dict <- function(k){
  nucleotides <- c("A", "C", "G", "T")

  k_mers_dict <- expand.grid(rep(list(nucleotides), k)) %>%
    unite("k_mers", everything(), remove = TRUE, sep = "") %>%
    unique() %>%
    mutate(count = 0)
  
  return(k_mers_dict)
}

k_mers_dict <- initialize_k_mer_dict(9)
```

Here, we utilize this function and it is evident that it returns a table giving the possible combinations of kmers.

```{r}
initialize_k_mer_dict(2)
#gives possible combinations of kmers
#doesn't count them 
```

In the code block below, L is window length, K is k-mer length and T is frequency threshold. The clump finding function takes in these 4 parameters, including genome. The function takes an initial window length from the beginning of genome. The count pattern functions counts the occurrences in the window. In this code block, j and i are iterators.

```{r}
#L is window length
#K is k-mer length
# T is frequency threshold
clump_finding <- function(genome, L, K, T) {
  intial_window <- str_sub(genome, start = 1, end = L )
  my_kmer_dict <- initialize_k_mer_dict(k)
  
  ng <- nchar(genome)
  
  for(i in 1:(L - (k - 1)) ) {
    #don't want to escape the window
    curr_kmer <- str_sub(intial_window, i, i+k-1)
    curr_count <- count_pattern(intial_window, curr_kmer)
#curr_kmer finds whatever kmer we're on, then curr_count counts how our curr_kmer appears in red window 
#find the row in my_kmer_dict that corresponds to curr_kmer
# then write curr_count into the count column
    curr_row <- which(my_kmer_dict$k_mer == curr_kmer)
    my_kmer_dict$count[curr_row] <- curr_count
  }
  candidates <- my_kmer_dict %>% 
    filter(count>=t) %>%
    pull(k_mer)
  
  for(j in 2:(ng - (L-2))) {
    rem_pattern <- str_sub(genome, j - 1, j - 1 + (k-1))
    add_pattern <- str_sub(genome, j + (L - 2) - (k-1), j + (L - 2))
    
    rem_row <- which(kmer_dict$k_mers == rem_pattern)
    add_row <- which(kmer_dict$k_mers == add_pattern)
    
    kmer_dict$count[rem_row] <- kmer_dict$count[rem_row] - 1
    kmer_dict$count[add_row] <- kmer_dict$count[add_row] + 1
    
    if(kmer_dict$count[add_row >= t]){
      candidates <- append(candidates, add_pattern)
      candidates <- unique(candidates)
    }
  }
  return(candidates)
}
```

```{r}
myGenome <- rand_genome(250000)

```

The function below returns the row where the k-mer column matches the string ACTTGCATG.

```{r}
    my_kmers <- initialize_k_mer_dict(9)
    which(my_kmers$k_mer == "ACTTGCATG")
    # which function identifies whhich row kmer is in
```
